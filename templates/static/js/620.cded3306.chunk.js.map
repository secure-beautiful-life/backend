{"version":3,"file":"static/js/620.cded3306.chunk.js","mappings":"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","sources":["core/components/AppInput.tsx","core/components/AppLink.tsx","core/components/modal/AppModal.tsx","core/constant/reg.ts","core/hooks/useInput.ts","views/login/Login.styled.ts","views/login/Login.tsx"],"sourcesContent":["import { InputHTMLAttributes, useState } from 'react'\nimport styled from 'styled-components'\nimport { getTypo } from '../../designs/util/atom'\nimport { getFlex } from '../../designs/util/display'\n\ninterface Props {\n  placeHolder: string\n  onSetValue: (e: any) => void\n  value: string\n  label?: string\n  errorMessage?: string\n}\n\nexport default function AppInput(props: Props & InputHTMLAttributes<HTMLInputElement>) {\n  const [isBlur, setIsBlur] = useState(false)\n\n  return (\n    <Wrap>\n      {props.label && <label htmlFor={props.value}>{props.label}</label>}\n      <Input\n        type={props.type}\n        id={props.label}\n        value={props.value}\n        onChange={props.onSetValue}\n        placeholder={props.placeHolder}\n        onBlur={() => setIsBlur(true)}\n        onFocus={() => setIsBlur(false)}\n      />\n      {isBlur && props.errorMessage && <ErrorMessage>{props.errorMessage}</ErrorMessage>}\n    </Wrap>\n  )\n}\n\nconst Wrap = styled.div`\n  ${getFlex({ dir: 'column', js: 'center', ai: 'flex-start' })}\n  width: 100%;\n  label {\n    padding-left: 0.5rem;\n    margin-bottom: 0.4rem;\n    ${getTypo({ fontSize: '0.65rem', fontWeight: 500 })}\n  }\n`\n\nconst Input = styled.input`\n  width: 100%;\n  height: 2.5rem;\n  border-radius: 1rem;\n  padding-left: 1rem;\n  margin-bottom: 0.6rem;\n  background-color: #f4f4f4;\n  border: none;\n  &:last-child {\n    margin-bottom: 0;\n  }\n  &:focus {\n    outline: none;\n  }\n`\n\nconst ErrorMessage = styled.p`\n  color: red;\n  padding-left: 0.5rem;\n`\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { getColor, getTypo } from '../../designs/util/atom'\n\ninterface Props {\n  href: string\n  content: string\n}\n\nexport default function AppLink({ href, content }: Props) {\n  return (\n    <Wrap>\n      <Link to={href}>{content}</Link>\n    </Wrap>\n  )\n}\n\nexport const Wrap = styled.div`\n  width: 100%;\n  a {\n    display: block;\n    width: 100%;\n    padding-right: 1rem;\n    ${getTypo({ fontSize: '0.8rem', fontWeight: 500 })}\n    ${getColor('GREY_BROWN')}\n    text-align: right;\n    &:visited {\n      color: inherit;\n    }\n  }\n`\n","import { Player } from '@lottiefiles/react-lottie-player'\nimport successAnimation from '../../../designs/assets/lottieSuccess.json'\nimport errorAnimation from '../../../designs/assets/lottieError.json'\nimport styled from 'styled-components'\nimport { VscChromeClose } from 'react-icons/vsc'\nimport { getBgColor, getTypo } from '../../../designs/util/atom'\nimport { getBoxShadow } from '../../../designs/util/boxShadow'\nimport { getFlex, getScreenCenter } from '../../../designs/util/display'\n\ninterface Props {\n  type: 'small'\n  icon?: 'error' | 'success'\n  children: JSX.Element\n}\n\nexport default function AppModal({ type, icon, children }: Props) {\n  if (type === 'small') {\n    return (\n      <SmallWrap>\n        <>\n          {icon === 'success' && (\n            <Player autoplay loop src={successAnimation} style={{ height: '80px', width: '80px' }} />\n          )}\n          {icon === 'error' && <Player autoplay loop src={errorAnimation} style={{ height: '80px', width: '80px' }} />}\n          {children}\n        </>\n      </SmallWrap>\n    )\n  } else return <></>\n}\n\nconst SmallWrap = styled.div`\n  ${getBgColor('WHITE')}\n  ${getScreenCenter()}\n  ${getFlex({ dir: 'column', js: 'flex-start' })}\n  width: 18rem;\n  height: 14rem;\n  padding: 1rem;\n  border-radius: 2rem;\n  ${getBoxShadow('TYPE_A')}\n  gap: 1rem;\n  z-index: 999;\n  + div {\n    width: 100%;\n  }\n  p {\n    ${getTypo({ fontSize: '1rem' })}\n    text-align: center;\n    margin-bottom: 2rem;\n    width: 100%;\n  }\n`\n","export const REG_USERNAME = new RegExp(/^[A-Za-z0-9]{4,12}$/)\nexport const REG_PASSWORD = new RegExp(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\nexport const REG_EMAIL = new RegExp(\n  /^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/\n)\nexport const REG_NAME = new RegExp(/^[ㄱ-ㅎ|가-힣|]{2,5}$/)\nexport const REG_PH = new RegExp(/^[0-9]{11}$/)\nexport const REG_BRAND = new RegExp(/^[ㄱ-ㅎ|가-힣|a-z|A-Z|0-9|]{2,10}$/)\nexport const REG_ADDRESS = new RegExp(/^[ㄱ-ㅎ|가-힣|a-z|A-Z|0-9|]{10,30}$/)\n","import { useEffect, useState } from 'react'\nimport { checkReg } from '../util'\n\nexport function useInput(initialState: any = '', regExp: any = undefined) {\n  const [value, setValue] = useState(initialState)\n  const [isValid, setIsValid] = useState(false)\n\n  const onSetValue = (e: any) => setValue(e.target.value)\n\n  useEffect(() => {\n    regExp && setIsValid(checkReg(value, regExp))\n  }, [value])\n\n  return { value, onSetValue, isValid }\n}\n","import styled from 'styled-components'\nimport { getFlex } from '../../designs/util/display'\n\nexport const LoginWrap = styled.div`\n  width: 100%;\n  height: 100vh;\n  gap: 1.5rem;\n  ${getFlex({ dir: 'column' })}\n  transform: translateY(-4rem);\n  button {\n    margin-top: 0.5rem;\n  }\n  + nav {\n    display: none;\n  }\n`\n","import { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nimport { Player } from '@lottiefiles/react-lottie-player'\n\nimport { cleanupState, selectIsDimmed, setIsDimmed } from '../../App.slice'\nimport { useRequestLoginMutation } from '../../api/auth/auth.query'\nimport AppButton from '../../core/components/AppButton'\nimport AppInput from '../../core/components/AppInput'\nimport AppLink from '../../core/components/AppLink'\nimport AppModal from '../../core/components/modal/AppModal'\nimport { REG_PASSWORD, REG_USERNAME } from '../../core/constant/reg'\nimport { useAppDispatch, useAppSelector } from '../../core/hooks/redux'\nimport { useInput } from '../../core/hooks/useInput'\nimport animationData from '../../designs/assets/lottieLogin.json'\nimport * as UI from './Login.styled'\n\nexport default function Login() {\n  const isDimmed = useAppSelector(selectIsDimmed)\n  const dispatch = useAppDispatch()\n  const navigate = useNavigate()\n  const [isModal, setIsModal] = useState(false)\n  const [login, { isLoading, error, isSuccess }] = useRequestLoginMutation()\n\n  const { value: username, onSetValue: setUserName, isValid: isValidUserName } = useInput('', REG_USERNAME)\n  const { value: password, onSetValue: setPassword, isValid: isValidPw } = useInput('', REG_PASSWORD)\n\n  const isAllValid = [isValidUserName, isValidPw].every((ele) => ele === true)\n\n  const onLogin = async () => {\n    const values = {\n      username,\n      password,\n    }\n    login(values)\n      .unwrap()\n      .then(() => navigate('/'))\n      .catch(() => {\n        dispatch(setIsDimmed(true))\n        setIsModal(true)\n      })\n  }\n\n  useEffect(() => {\n    return () => {\n      dispatch(cleanupState())\n    }\n  }, [])\n\n  return (\n    <>\n      <UI.LoginWrap>\n        <Player autoplay loop src={animationData} style={{ height: '300px', width: '300px' }}></Player>\n        <AppInput\n          label=\"아이디\"\n          placeHolder=\"영어, 숫자 4 ~ 13 글자\"\n          value={username}\n          onSetValue={setUserName}\n          errorMessage={!isValidUserName ? '아이디는 영어, 숫자로 4글자 이상, 13글자 이하입니다.' : ''}\n        />\n        <AppInput\n          type=\"password\"\n          label=\"비밀번호\"\n          placeHolder=\"영어, 숫자, 특수문자 8 ~ 13 글자\"\n          value={password}\n          onSetValue={setPassword}\n          errorMessage={!isValidPw ? '아이디는 영어, 숫자, 특수문자로 8글자 이상, 13글자 이하입니다.' : ''}\n        />\n        <AppButton content=\"로그인\" radius=\"2rem\" onClick={onLogin} disabled={false} />\n        <AppLink href=\"/signup\" content=\"회원가입 하러가기\" />\n      </UI.LoginWrap>\n      {isModal && isDimmed && (\n        <AppModal type=\"small\" icon=\"error\">\n          <div>\n            <p>{'잘못된 계정입니다.'}</p>\n            <AppButton\n              content=\"확인\"\n              onClick={() => {\n                dispatch(setIsDimmed(false))\n                setIsModal(false)\n              }}\n              radius=\"1.5rem\"\n              background=\"#9DAABB\"\n            />\n          </div>\n        </AppModal>\n      )}\n    </>\n  )\n}\n"],"names":["AppInput","props","useState","isBlur","setIsBlur","Wrap","label","htmlFor","value","Input","type","id","onChange","onSetValue","placeholder","placeHolder","onBlur","onFocus","errorMessage","ErrorMessage","styled","getFlex","dir","js","ai","getTypo","fontSize","fontWeight","AppLink","href","content","to","getColor","AppModal","icon","children","SmallWrap","autoplay","loop","src","successAnimation","style","height","width","errorAnimation","getBgColor","getScreenCenter","getBoxShadow","REG_USERNAME","RegExp","REG_PASSWORD","REG_EMAIL","REG_NAME","REG_PH","REG_BRAND","REG_ADDRESS","useInput","initialState","regExp","undefined","setValue","isValid","setIsValid","e","target","useEffect","checkReg","LoginWrap","Login","isDimmed","useAppSelector","selectIsDimmed","dispatch","useAppDispatch","navigate","useNavigate","isModal","setIsModal","useRequestLoginMutation","login","isLoading","error","isSuccess","username","setUserName","isValidUserName","password","setPassword","isValidPw","onLogin","every","ele","unwrap","then","catch","setIsDimmed","cleanupState","animationData","AppButton","radius","onClick","disabled","background"],"sourceRoot":""}